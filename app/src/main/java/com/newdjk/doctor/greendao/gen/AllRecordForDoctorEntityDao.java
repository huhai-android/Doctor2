package com.newdjk.doctor.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.newdjk.doctor.ui.entity.AllRecordForDoctorEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_RECORD_FOR_DOCTOR_ENTITY".
*/
public class AllRecordForDoctorEntityDao extends AbstractDao<AllRecordForDoctorEntity, Long> {

    public static final String TABLENAME = "ALL_RECORD_FOR_DOCTOR_ENTITY";

    /**
     * Properties of entity AllRecordForDoctorEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "Content", false, "CONTENT");
        public final static Property PatientName = new Property(2, String.class, "PatientName", false, "PATIENT_NAME");
        public final static Property ApplicantHeadImgUrl = new Property(3, String.class, "ApplicantHeadImgUrl", false, "APPLICANT_HEAD_IMG_URL");
        public final static Property EndTime = new Property(4, String.class, "EndTime", false, "END_TIME");
        public final static Property PayTime = new Property(5, String.class, "PayTime", false, "PAY_TIME");
        public final static Property CreateTime = new Property(6, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property RecordId = new Property(7, int.class, "RecordId", false, "RECORD_ID");
        public final static Property Type = new Property(8, int.class, "Type", false, "TYPE");
        public final static Property Status = new Property(9, int.class, "Status", false, "STATUS");
        public final static Property DealWithTime = new Property(10, String.class, "DealWithTime", false, "DEAL_WITH_TIME");
        public final static Property StartTime = new Property(11, String.class, "StartTime", false, "START_TIME");
        public final static Property ApplicantIMId = new Property(12, String.class, "ApplicantIMId", false, "APPLICANT_IMID");
        public final static Property UnReadNum = new Property(13, long.class, "unReadNum", false, "UN_READ_NUM");
        public final static Property Diagnoses = new Property(14, String.class, "Diagnoses", false, "DIAGNOSES");
        public final static Property OrderStatus = new Property(15, int.class, "OrderStatus", false, "ORDER_STATUS");
        public final static Property ReExaminationDate = new Property(16, String.class, "ReExaminationDate", false, "RE_EXAMINATION_DATE");
        public final static Property ReExaminationStartTime = new Property(17, String.class, "ReExaminationStartTime", false, "RE_EXAMINATION_START_TIME");
        public final static Property ReExaminationEndTime = new Property(18, String.class, "ReExaminationEndTime", false, "RE_EXAMINATION_END_TIME");
        public final static Property Age = new Property(19, String.class, "Age", false, "AGE");
        public final static Property AreaName = new Property(20, String.class, "AreaName", false, "AREA_NAME");
        public final static Property PatientSex = new Property(21, int.class, "PatientSex", false, "PATIENT_SEX");
        public final static Property IsDrKey = new Property(22, int.class, "IsDrKey", false, "IS_DR_KEY");
        public final static Property IsPatientMain = new Property(23, int.class, "IsPatientMain", false, "IS_PATIENT_MAIN");
        public final static Property Disease = new Property(24, String.class, "Disease", false, "DISEASE");
        public final static Property ServiceCode = new Property(25, String.class, "ServiceCode", false, "SERVICE_CODE");
        public final static Property TimeStamp = new Property(26, long.class, "TimeStamp", false, "TIME_STAMP");
        public final static Property RecordData = new Property(27, String.class, "RecordData", false, "RECORD_DATA");
        public final static Property ApplicantId = new Property(28, int.class, "ApplicantId", false, "APPLICANT_ID");
        public final static Property PatientId = new Property(29, int.class, "PatientId", false, "PATIENT_ID");
        public final static Property DateTime = new Property(30, String.class, "DateTime", false, "DATE_TIME");
    }


    public AllRecordForDoctorEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AllRecordForDoctorEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_RECORD_FOR_DOCTOR_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: Content
                "\"PATIENT_NAME\" TEXT," + // 2: PatientName
                "\"APPLICANT_HEAD_IMG_URL\" TEXT," + // 3: ApplicantHeadImgUrl
                "\"END_TIME\" TEXT," + // 4: EndTime
                "\"PAY_TIME\" TEXT," + // 5: PayTime
                "\"CREATE_TIME\" TEXT," + // 6: CreateTime
                "\"RECORD_ID\" INTEGER NOT NULL ," + // 7: RecordId
                "\"TYPE\" INTEGER NOT NULL ," + // 8: Type
                "\"STATUS\" INTEGER NOT NULL ," + // 9: Status
                "\"DEAL_WITH_TIME\" TEXT," + // 10: DealWithTime
                "\"START_TIME\" TEXT," + // 11: StartTime
                "\"APPLICANT_IMID\" TEXT," + // 12: ApplicantIMId
                "\"UN_READ_NUM\" INTEGER NOT NULL ," + // 13: unReadNum
                "\"DIAGNOSES\" TEXT," + // 14: Diagnoses
                "\"ORDER_STATUS\" INTEGER NOT NULL ," + // 15: OrderStatus
                "\"RE_EXAMINATION_DATE\" TEXT," + // 16: ReExaminationDate
                "\"RE_EXAMINATION_START_TIME\" TEXT," + // 17: ReExaminationStartTime
                "\"RE_EXAMINATION_END_TIME\" TEXT," + // 18: ReExaminationEndTime
                "\"AGE\" TEXT," + // 19: Age
                "\"AREA_NAME\" TEXT," + // 20: AreaName
                "\"PATIENT_SEX\" INTEGER NOT NULL ," + // 21: PatientSex
                "\"IS_DR_KEY\" INTEGER NOT NULL ," + // 22: IsDrKey
                "\"IS_PATIENT_MAIN\" INTEGER NOT NULL ," + // 23: IsPatientMain
                "\"DISEASE\" TEXT," + // 24: Disease
                "\"SERVICE_CODE\" TEXT," + // 25: ServiceCode
                "\"TIME_STAMP\" INTEGER NOT NULL ," + // 26: TimeStamp
                "\"RECORD_DATA\" TEXT," + // 27: RecordData
                "\"APPLICANT_ID\" INTEGER NOT NULL ," + // 28: ApplicantId
                "\"PATIENT_ID\" INTEGER NOT NULL ," + // 29: PatientId
                "\"DATE_TIME\" TEXT);"); // 30: DateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_RECORD_FOR_DOCTOR_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AllRecordForDoctorEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(2, Content);
        }
 
        String PatientName = entity.getPatientName();
        if (PatientName != null) {
            stmt.bindString(3, PatientName);
        }
 
        String ApplicantHeadImgUrl = entity.getApplicantHeadImgUrl();
        if (ApplicantHeadImgUrl != null) {
            stmt.bindString(4, ApplicantHeadImgUrl);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(5, EndTime);
        }
 
        String PayTime = entity.getPayTime();
        if (PayTime != null) {
            stmt.bindString(6, PayTime);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(7, CreateTime);
        }
        stmt.bindLong(8, entity.getRecordId());
        stmt.bindLong(9, entity.getType());
        stmt.bindLong(10, entity.getStatus());
 
        String DealWithTime = entity.getDealWithTime();
        if (DealWithTime != null) {
            stmt.bindString(11, DealWithTime);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(12, StartTime);
        }
 
        String ApplicantIMId = entity.getApplicantIMId();
        if (ApplicantIMId != null) {
            stmt.bindString(13, ApplicantIMId);
        }
        stmt.bindLong(14, entity.getUnReadNum());
 
        String Diagnoses = entity.getDiagnoses();
        if (Diagnoses != null) {
            stmt.bindString(15, Diagnoses);
        }
        stmt.bindLong(16, entity.getOrderStatus());
 
        String ReExaminationDate = entity.getReExaminationDate();
        if (ReExaminationDate != null) {
            stmt.bindString(17, ReExaminationDate);
        }
 
        String ReExaminationStartTime = entity.getReExaminationStartTime();
        if (ReExaminationStartTime != null) {
            stmt.bindString(18, ReExaminationStartTime);
        }
 
        String ReExaminationEndTime = entity.getReExaminationEndTime();
        if (ReExaminationEndTime != null) {
            stmt.bindString(19, ReExaminationEndTime);
        }
 
        String Age = entity.getAge();
        if (Age != null) {
            stmt.bindString(20, Age);
        }
 
        String AreaName = entity.getAreaName();
        if (AreaName != null) {
            stmt.bindString(21, AreaName);
        }
        stmt.bindLong(22, entity.getPatientSex());
        stmt.bindLong(23, entity.getIsDrKey());
        stmt.bindLong(24, entity.getIsPatientMain());
 
        String Disease = entity.getDisease();
        if (Disease != null) {
            stmt.bindString(25, Disease);
        }
 
        String ServiceCode = entity.getServiceCode();
        if (ServiceCode != null) {
            stmt.bindString(26, ServiceCode);
        }
        stmt.bindLong(27, entity.getTimeStamp());
 
        String RecordData = entity.getRecordData();
        if (RecordData != null) {
            stmt.bindString(28, RecordData);
        }
        stmt.bindLong(29, entity.getApplicantId());
        stmt.bindLong(30, entity.getPatientId());
 
        String DateTime = entity.getDateTime();
        if (DateTime != null) {
            stmt.bindString(31, DateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AllRecordForDoctorEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(2, Content);
        }
 
        String PatientName = entity.getPatientName();
        if (PatientName != null) {
            stmt.bindString(3, PatientName);
        }
 
        String ApplicantHeadImgUrl = entity.getApplicantHeadImgUrl();
        if (ApplicantHeadImgUrl != null) {
            stmt.bindString(4, ApplicantHeadImgUrl);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(5, EndTime);
        }
 
        String PayTime = entity.getPayTime();
        if (PayTime != null) {
            stmt.bindString(6, PayTime);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(7, CreateTime);
        }
        stmt.bindLong(8, entity.getRecordId());
        stmt.bindLong(9, entity.getType());
        stmt.bindLong(10, entity.getStatus());
 
        String DealWithTime = entity.getDealWithTime();
        if (DealWithTime != null) {
            stmt.bindString(11, DealWithTime);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(12, StartTime);
        }
 
        String ApplicantIMId = entity.getApplicantIMId();
        if (ApplicantIMId != null) {
            stmt.bindString(13, ApplicantIMId);
        }
        stmt.bindLong(14, entity.getUnReadNum());
 
        String Diagnoses = entity.getDiagnoses();
        if (Diagnoses != null) {
            stmt.bindString(15, Diagnoses);
        }
        stmt.bindLong(16, entity.getOrderStatus());
 
        String ReExaminationDate = entity.getReExaminationDate();
        if (ReExaminationDate != null) {
            stmt.bindString(17, ReExaminationDate);
        }
 
        String ReExaminationStartTime = entity.getReExaminationStartTime();
        if (ReExaminationStartTime != null) {
            stmt.bindString(18, ReExaminationStartTime);
        }
 
        String ReExaminationEndTime = entity.getReExaminationEndTime();
        if (ReExaminationEndTime != null) {
            stmt.bindString(19, ReExaminationEndTime);
        }
 
        String Age = entity.getAge();
        if (Age != null) {
            stmt.bindString(20, Age);
        }
 
        String AreaName = entity.getAreaName();
        if (AreaName != null) {
            stmt.bindString(21, AreaName);
        }
        stmt.bindLong(22, entity.getPatientSex());
        stmt.bindLong(23, entity.getIsDrKey());
        stmt.bindLong(24, entity.getIsPatientMain());
 
        String Disease = entity.getDisease();
        if (Disease != null) {
            stmt.bindString(25, Disease);
        }
 
        String ServiceCode = entity.getServiceCode();
        if (ServiceCode != null) {
            stmt.bindString(26, ServiceCode);
        }
        stmt.bindLong(27, entity.getTimeStamp());
 
        String RecordData = entity.getRecordData();
        if (RecordData != null) {
            stmt.bindString(28, RecordData);
        }
        stmt.bindLong(29, entity.getApplicantId());
        stmt.bindLong(30, entity.getPatientId());
 
        String DateTime = entity.getDateTime();
        if (DateTime != null) {
            stmt.bindString(31, DateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AllRecordForDoctorEntity readEntity(Cursor cursor, int offset) {
        AllRecordForDoctorEntity entity = new AllRecordForDoctorEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PatientName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ApplicantHeadImgUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EndTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PayTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CreateTime
            cursor.getInt(offset + 7), // RecordId
            cursor.getInt(offset + 8), // Type
            cursor.getInt(offset + 9), // Status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // DealWithTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // StartTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ApplicantIMId
            cursor.getLong(offset + 13), // unReadNum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Diagnoses
            cursor.getInt(offset + 15), // OrderStatus
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ReExaminationDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ReExaminationStartTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // ReExaminationEndTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Age
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // AreaName
            cursor.getInt(offset + 21), // PatientSex
            cursor.getInt(offset + 22), // IsDrKey
            cursor.getInt(offset + 23), // IsPatientMain
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // Disease
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ServiceCode
            cursor.getLong(offset + 26), // TimeStamp
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // RecordData
            cursor.getInt(offset + 28), // ApplicantId
            cursor.getInt(offset + 29), // PatientId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // DateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AllRecordForDoctorEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPatientName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApplicantHeadImgUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPayTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRecordId(cursor.getInt(offset + 7));
        entity.setType(cursor.getInt(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setDealWithTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStartTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setApplicantIMId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUnReadNum(cursor.getLong(offset + 13));
        entity.setDiagnoses(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOrderStatus(cursor.getInt(offset + 15));
        entity.setReExaminationDate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setReExaminationStartTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setReExaminationEndTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAge(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAreaName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPatientSex(cursor.getInt(offset + 21));
        entity.setIsDrKey(cursor.getInt(offset + 22));
        entity.setIsPatientMain(cursor.getInt(offset + 23));
        entity.setDisease(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setServiceCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTimeStamp(cursor.getLong(offset + 26));
        entity.setRecordData(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setApplicantId(cursor.getInt(offset + 28));
        entity.setPatientId(cursor.getInt(offset + 29));
        entity.setDateTime(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AllRecordForDoctorEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AllRecordForDoctorEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AllRecordForDoctorEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
