package com.newdjk.doctor.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.newdjk.doctor.ui.entity.ChatHistoryEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_HISTORY_ENTITY".
*/
public class ChatHistoryEntityDao extends AbstractDao<ChatHistoryEntity, Long> {

    public static final String TABLENAME = "CHAT_HISTORY_ENTITY";

    /**
     * Properties of entity ChatHistoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "Id", true, "_id");
        public final static Property PatientId = new Property(1, int.class, "PatientId", false, "PATIENT_ID");
        public final static Property DoctorId = new Property(2, int.class, "DoctorId", false, "DOCTOR_ID");
        public final static Property MsgSeq = new Property(3, long.class, "MsgSeq", false, "MSG_SEQ");
        public final static Property From_Account = new Property(4, String.class, "From_Account", false, "FROM__ACCOUNT");
        public final static Property To_Account = new Property(5, String.class, "To_Account", false, "TO__ACCOUNT");
        public final static Property MsgType = new Property(6, int.class, "MsgType", false, "MSG_TYPE");
        public final static Property MsgBody = new Property(7, String.class, "MsgBody", false, "MSG_BODY");
        public final static Property MsgTimestamp = new Property(8, long.class, "MsgTimestamp", false, "MSG_TIMESTAMP");
        public final static Property MsgSendTime = new Property(9, String.class, "MsgSendTime", false, "MSG_SEND_TIME");
        public final static Property MsgRandom = new Property(10, String.class, "MsgRandom", false, "MSG_RANDOM");
        public final static Property UpdateTime = new Property(11, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property CreateTime = new Property(12, String.class, "CreateTime", false, "CREATE_TIME");
    }


    public ChatHistoryEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChatHistoryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_HISTORY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: Id
                "\"PATIENT_ID\" INTEGER NOT NULL ," + // 1: PatientId
                "\"DOCTOR_ID\" INTEGER NOT NULL ," + // 2: DoctorId
                "\"MSG_SEQ\" INTEGER NOT NULL ," + // 3: MsgSeq
                "\"FROM__ACCOUNT\" TEXT," + // 4: From_Account
                "\"TO__ACCOUNT\" TEXT," + // 5: To_Account
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 6: MsgType
                "\"MSG_BODY\" TEXT," + // 7: MsgBody
                "\"MSG_TIMESTAMP\" INTEGER NOT NULL ," + // 8: MsgTimestamp
                "\"MSG_SEND_TIME\" TEXT," + // 9: MsgSendTime
                "\"MSG_RANDOM\" TEXT," + // 10: MsgRandom
                "\"UPDATE_TIME\" TEXT," + // 11: UpdateTime
                "\"CREATE_TIME\" TEXT);"); // 12: CreateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_HISTORY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatHistoryEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPatientId());
        stmt.bindLong(3, entity.getDoctorId());
        stmt.bindLong(4, entity.getMsgSeq());
 
        String From_Account = entity.getFrom_Account();
        if (From_Account != null) {
            stmt.bindString(5, From_Account);
        }
 
        String To_Account = entity.getTo_Account();
        if (To_Account != null) {
            stmt.bindString(6, To_Account);
        }
        stmt.bindLong(7, entity.getMsgType());
 
        String MsgBody = entity.getMsgBody();
        if (MsgBody != null) {
            stmt.bindString(8, MsgBody);
        }
        stmt.bindLong(9, entity.getMsgTimestamp());
 
        String MsgSendTime = entity.getMsgSendTime();
        if (MsgSendTime != null) {
            stmt.bindString(10, MsgSendTime);
        }
 
        String MsgRandom = entity.getMsgRandom();
        if (MsgRandom != null) {
            stmt.bindString(11, MsgRandom);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(12, UpdateTime);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(13, CreateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatHistoryEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPatientId());
        stmt.bindLong(3, entity.getDoctorId());
        stmt.bindLong(4, entity.getMsgSeq());
 
        String From_Account = entity.getFrom_Account();
        if (From_Account != null) {
            stmt.bindString(5, From_Account);
        }
 
        String To_Account = entity.getTo_Account();
        if (To_Account != null) {
            stmt.bindString(6, To_Account);
        }
        stmt.bindLong(7, entity.getMsgType());
 
        String MsgBody = entity.getMsgBody();
        if (MsgBody != null) {
            stmt.bindString(8, MsgBody);
        }
        stmt.bindLong(9, entity.getMsgTimestamp());
 
        String MsgSendTime = entity.getMsgSendTime();
        if (MsgSendTime != null) {
            stmt.bindString(10, MsgSendTime);
        }
 
        String MsgRandom = entity.getMsgRandom();
        if (MsgRandom != null) {
            stmt.bindString(11, MsgRandom);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(12, UpdateTime);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(13, CreateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ChatHistoryEntity readEntity(Cursor cursor, int offset) {
        ChatHistoryEntity entity = new ChatHistoryEntity( //
            cursor.getLong(offset + 0), // Id
            cursor.getInt(offset + 1), // PatientId
            cursor.getInt(offset + 2), // DoctorId
            cursor.getLong(offset + 3), // MsgSeq
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // From_Account
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // To_Account
            cursor.getInt(offset + 6), // MsgType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // MsgBody
            cursor.getLong(offset + 8), // MsgTimestamp
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // MsgSendTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // MsgRandom
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UpdateTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // CreateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatHistoryEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPatientId(cursor.getInt(offset + 1));
        entity.setDoctorId(cursor.getInt(offset + 2));
        entity.setMsgSeq(cursor.getLong(offset + 3));
        entity.setFrom_Account(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTo_Account(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMsgType(cursor.getInt(offset + 6));
        entity.setMsgBody(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMsgTimestamp(cursor.getLong(offset + 8));
        entity.setMsgSendTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMsgRandom(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreateTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatHistoryEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatHistoryEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatHistoryEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
